test = 1+1
test
clear
clear()
clc()
quit()
test = c(0 0 0 0 0 0 0 0)
test = c(0, 0, 0, 0, 0, 0, 0, 0)
test2 = c(0, 0, 0, 0, 1, 1, 1, 1)
test3 = c(2, 2, 2, 2, 1, 1, 1, 1)
test = data.frame(test, test2, test3)
test
clear()
clc
cls
cls()
clc()
aaa
q()
q()
?rweka
??rweka
??RWeka
?RWekajars
??RWekajars
??RWeka
install.packages("RWeka")
install.packages("RWekajars")
install.packages("RWeka")
install.packages("RWeka")
install.packages("RWeka")
install.packages("RWekajars")
install.packages("RWeka")
library("RWeka")
?RWeka
quit()
install.packages("ggplot2")
?kmeans
q()
library('tm')
p <- c(0)
?for
for (i = 1:10)
p <- cumsum(rnorm(100)+0)
plot(p)
p <- cumsum(rnorm(10000)+0)
plot(p)
p <- cumsum(rnorm(n = 10000, mean = 0))
plot(p)
p <- cumsum(rnorm(n = 10000, mean = 5))
plot(p)
p <- cumsum(rnorm(n = 10000, mean = 1))
plot(p)
p <- cumsum(rnorm(n = 10000, mean = 0))
plot(p)
?replicate
# Generate k random walks across time {0, 1, ... , T}
T <- 100
k <- 250
initial.value <- 10
GetRandomWalk <- function() {
# Add a standard normal at each step
initial.value + c(0, cumsum(rnorm(T)))
}
# Matrix of random walks
values <- replicate(k, GetRandomWalk())
# Create an empty plot
dev.new(height=8, width=12)
plot(0:T, rep(NA, T + 1), main=sprintf("%s Random Walks", k),
xlab="time", ylab="value",
ylim=10 + 4.5 * c(-1, 1) * sqrt(T))
mtext(sprintf("%s%s} with initial value of %s",
"Across time {0, 1, ... , ", T, initial.value))
for (i in 1:k) {
lines(0:T, values[ , i], lwd=0.25)
}
for (sign in c(-1, 1)) {
curve(initial.value + sign * 1.96 * sqrt(x), from=0, to=T,
n=2*T, col="darkred", lty=2, lwd=1.5, add=TRUE)
}
legend("topright", "1.96 * sqrt(t)",
bty="n", lwd=1.5, lty=2, col="darkred")
install.packages('pitchRx')
library('pitchRx')
?pitchRx
dat <- scrape(start="2014-03-20", end="2014-03-20")
dat <- scrape(start="2013-06-01", end="2013-06-01")
head(dat)
head(dat[["action"]])
head(dat[["pitch"]])
head(dat[["atbat"]])
datATBAT <- dat[["atbat"]]
?sort_by
library('plyr')
?sort_by
?sortby
?sort
head(sort(datATBAT$start_tfs_zulu))
?order_by
?sort_by
library(dplyr)
install.packages(dplyr)
install.packages("dplyr")
?sort_by
?sortby
?order_by
?orderby
library(dplyr)
?order_by
?sort_by
mutate(datATBAT, order_by(datATBAT$start_tfs_zulu))
mutate(datATBAT, running=order_by(datATBAT$start_tfs_zulu))
mutate(datATBAT, order_by(datATBAT$start_tfs_zulu, datATBAT))
mutate(datATBAT, order_by=datATBAT$start_tfs_zulu)
mutate(datATBAT, order_by(datATBAT$start_tfs_zulu))
?mutate
mutate(datATBAT, order_by(datATBAT$start_tfs_zulu))
datATBAT[order_by(datATBAT$start_tfs_zulu)]
datATBAT[order(datATBAT$start_tfs_zulu)]
datATBAT[order(start_tfs_zulu)]
col.names(datATBAT)
col.name(datATBAT)
names(datATBAT)
datATBAT[order_by(start_tfs_zulu)]
datATBAT[order(datATBAT$start_tfs_zulu)]
table(datATBAT$s)
hist(table(datATBAT$s))
hist(datATBAT$s)
bar(table(datATBAT$s))
barplot(table(datATBAT$s))
barplot(table(datATBAT$o))
barplot(table(datATBAT$num))
barplot(table(datATBAT$p_throws))
pitches
head(Rivera)
install.packages("entropy")
quit()
install.packages(XML)
install.packages("XML")
install.packages("jsonlite")
install.packages("xlsx")
install.packages("data.table")
?parse
install.packages("KernSmooth")
library(KernSmooth)
quit()
sys.which("git")
Sys.which("git")
system('git config --global -list')
system('git config --global --list')
git version
Sys.which("git")
Sys.which("git")
Sys.which("git")
?Sys.which
?Sys.path
get_path()
library(devtools)
get_path()
add_path("C:\\Program Files\\Git\\bin\\git.exe")
get_path()
Sys.which("git")
Sys.which()
Sys.which("git")
()
getwd()
ls()
dir()
Sys.where("git")
Sys.which("git")
get_path
get_path()
require(devtools)
get_path()
path0 <- get_path()
path0
old <- add_path(".")
get_path()
git_path(()
Sys.where("git")
Sys.which("git")
quit
quit()
Sys.which("git")
()
getwd()
()
q()
test1 <- cbind(c(1 2 3), c(3 4 5))
test1 <- cbind(c(1, 2, 3), c(3, 4, 5))
test
test1
test2 <- cbind(c(1, 2, 3), c(3, 4, 5))
test2 <- cbind(c(1, 2), c(3, 4)
test2
test2 <- cbind(c(1, 2), c(3, 4))
test2
rbind(test2, test3)
test2 <- cbind(c(1, 2, 3), c(3, 4, 5), c(4, 5, 6))
rbind(test2, test3)
rbind(test2, test3)
rbind(test2, test1)
test1
test2
rbind(test2, test1)
cbind(test2, test1)
rbind(test2, test1)
rbind(test2, test1)
?sample.int
sample.int(c(1,3,6,9), 2)
sample.int(c(1,3,6,9), 1)
sample.int(c(1,3,6,9), 1)
sample.int(c(1,3,6,9), 1)
c(1,3,6,9)
test5 <- c(1,3,6,9)
sample.int(test5, 1)
sample.int(test5, 2)
aa <- c(ab = c(3:5), ac = 4)
aa
aa(ab)
aa[ab]
aa(ab)
aa['ab']
aa[('ab')]
aa('ab')
aa[ab]
aa['ab'1]
aa[ab1]
aa['ab1'']
aa['ab1'']']
aa['ab1']
rm(ls())
ls()
rm(ls())
rm(ls())
rm(a = ls())
?rm
rm(list = ls())
air3
airline <- matrix(AirPassengers)
dim(airline) <- NULL
View(airline)
class(airline)
class(airline[1])
class(airline[2])
?save
getwd()
setwd("~/github/MLDM_RBasic/appendix/")
save(airline, file = "airlindData.RData")
rm(list=ls())
load("airlindData.RData")
airquality
View(airquality)
dim(airline)
dim(airline) <- c(12, 12)
airline
quit()
