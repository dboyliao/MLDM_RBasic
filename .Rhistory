fake_id[i] <- tmp
}
return(fake_id)
}
id_gen <- function(numbers, period){
fake_id <- rep(NA, period)
for (i in 0:(numbers - 1)){
tmp <- i %% period
if (tmp == 0){
tmp <- period
}
fake_id[i] <- tmp
}
return(fake_id)
}
View(data)
fake_id_2002 <- id_gen(196, 202)
fake_id <- rep(NA, 999)
fake_id[ind2002] <- fake_id_2002
id_gen <- function(numbers, period){
fake_id <- rep(NA, numbers)
for (i in 0:(numbers - 1)){
tmp <- i %% period
if (tmp == 0){
tmp <- period
}
fake_id[i] <- tmp
}
return(fake_id)
}
fake_id <- rep(NA, 999)
fake_id_2002 <- id_gen(196, 202)
fake_id[ind2002] <- fake_id_2002
fake_id_2003 <- id_gen(199, 202)
fake_id[ind2003] <- fake_id_2003
fake_id_2004 <- id_gen(200, 202)
fake_id[ind2004] <- fake_id_2004
fake_id_2005 <- id_gen(202, 202)
fake_id[ind2005] <- fake_id_2005
fake_id_2006 <- id_gen(202, 202)
fake_id[ind2006] <- fake_id_2006
any(is.na(fake_id))
which(is.na(fake_id))
any(is.na(fake_id_2006))
any(is.na(fake_id_2005))
id_gen <- function(numbers, period){
fake_id <- rep(NA, numbers)
for (i in 0:numbers - 1){
i <- i + 1
tmp <- i %% period
if (tmp == 0){
tmp <- period
}
fake_id[i] <- tmp
}
return(fake_id)
}
fake_id_2002 <- id_gen(196, 202)
fake_id_2002[196]
fake_id <- rep(NA, 999)
fake_id_2002 <- id_gen(196, 202)
fake_id[ind2002] <- fake_id_2002
fake_id_2003 <- id_gen(199, 202)
fake_id[ind2003] <- fake_id_2003
fake_id_2004 <- id_gen(200, 202)
fake_id[ind2004] <- fake_id_2004
fake_id_2005 <- id_gen(202, 202)
fake_id[ind2005] <- fake_id_2005
fake_id_2006 <- id_gen(202, 202)
fake_id[ind2006] <- fake_id_2006
any(is.na(fake_id))
data <- cbind(fake_id, data)
View(data)
fake_data <- data
rm(data)
ls
ls()
which(ls() == 'fake_data')
ls()[-2]
rm(list = ls()[-2])
save.image("~/Documents/SChang(2011)/panal/fake_data.RData")
load("~/Documents/SChang(2011)/panel.RData")
rm(list = ls())
load("~/Documents/SChang(2011)/panal/panel_model.R")
load("~/Documents/SChang(2011)/panal/fake_data.RData")
View(fake_data)
test <- ln_invst ~ lnS + lnSL
test_data <- model.frame(test, data = fake_data)
View(test_data)
test <- test + year
test <- ln_invst , W ~ lnS + lnSL
test <- ln_invst + W ~ lnS + lnSL
test_data <- model.frame(test, data = fake_data)
View(test_dat)
View(test_data)
fake_data[, 'ln_invst'] + fake_data[, 'W'] == test_data[, 1]
all(fake_data[, 'ln_invst'] + fake_data[, 'W'] == test_data[, 1])
panel_model <- function(fo, data){
if (!is.loaded('tmvtnorm')) library('tmvtnorm')
u <- rtruncnorm(100, a = 0)
model.data <- model.frame(fo, data)
return(model.data)
}
test <- panel_model(ln_invst ~ W, fake_data)
?rtruncnorm
library('tmvtnorm')
u <- rtruncnorm(100, a = 0)
u <- rtmvnorm(100, a = 0)
u <- rtmvnorm(100, lower = 0)
u <- rtmvnorm(100)
lower <- c(-1, -1)
upper <- c(1, 1)
mean <- c(0.5, 0.5)
sigma <- matrix(c(1, 0.8, 0.8, 1), 2, 2)
if (!is.loaded('tmvtnorm')) library('tmvtnorm')
u <- rtmvnorm(100)
u <- rtmvnorm2(100)
model.data <- model.frame(fo, data)
return(model.data)
u <- rtmvnorm2(100)
test <- panel_model(ln_invst ~ W, fake_data)
# rm(list = ls())
## It's fake panel data
# load("~/Documents/SChang(2011)/panal/fake_data.RData")
panel_model <- function(fo, data){
if (!is.loaded('tmvtnorm')) library('tmvtnorm')
# u <- rtruncnorm(100, a = 0)
model.data <- model.frame(fo, data)
}
test <- panel_model(ln_invst ~ W, fake_data)
View(test)
rm(list = ls())
load("~/Documents/SChang(2011)/panal/fake_data.RData")
head(fake_dat)
head(fake_data)
attrition(fake_data)
attritions(fake_data)
attributes(fake_data)
attributes(fake_data) <- NULL
attributes(fake_data) <- list(class = 'data.frame', names = list(letters[1:8]))
head(fake_data)
load("~/Documents/SChang(2011)/panal/fake_data.RData")
attributes(fake_data)
class(attributes(fake_data))
attributes(fake_data) <- NULL
fake_data
test <- as.data.frame(fake_data)
attributes(test)
class(attributes(test)['names'])
View(test)
attributes(test) <- list(class = 'data.frame')
test <- as.data.frame(fake_data)
attributes(test) <- list(class = 'data.frame', names = list('a', 'b', 'c', 'd', 'e', 'f', 'g', 'h'))
test
names(test)
test <- as.data.frame(fake_data)
attributes(test) <- NULL
attributes(test) <- list(class = 'data.frame', names = list('a', 'b', 'c', 'd', 'e', 'f', 'g', 'h'), row.names = 1:999)
attributes(test) <- NULL
attributes(test) <- list(class = 'data.frame', row.names = 1:999)
View(test)
test
head(test)
names(test)
names(test) <- letters[1:6]
names(test)
names(test) <- letters[1:8]
View(test)
if (!is.loaded('tmvtnorm')) library('tmvtnorm')
if (any(is.na(data))){
print('NA detected in the data set.')
print('Observation(s) with NA will be removed.')
data <- na.omit(data)
}
data <- fake_data
if (any(is.na(data))){
print('NA detected in the data set.')
print('Observation(s) with NA will be removed.')
data <- na.omit(data)
}
n_obser <- nrow(data)
View(data)
load("~/Documents/SChang(2011)/panal/fake_data.RData")
load("~/Documents/SChang(2011)/panal/fake_data.RData")
if (!is.loaded('tmvtnorm')) library('tmvtnorm')
if (any(is.na(data))){
print('NA detected in the data set.')
print('Observation(s) with NA will be removed.')
data <- na.omit(data)
}
data <- fake_data
if (any(is.na(data))){
print('NA detected in the data set.')
print('Observation(s) with NA will be removed.')
data <- na.omit(data)
}
n_obser <- nrow(data)
model.data <- model.frame(fo, data)
View(data)
f0 <- ln_invst ~ W + lnS + lnSL
model.data <- model.frame(fo, data)
fo <- ln_invst ~ W + lnS + lnSL
rm(f0)
model.data <- model.frame(fo, data)
View(model.data)
y <- matrix(model.data[, 1], ncol = 1)
y
class(y)
fake_data2 <- cbind(fake_data[2:999, 1:3], ln_invstL = fake_data[1:998,3], fake_data[2:999, 4:8])
head(fake_data2)
fo <- ln_invst ~ ln_invstL + W + lnS + lnSL
n_obser <- nrow(data)
data <- fake_data2
n_obser <- nrow(data)
model.data <- model.frame(fo, data)
y <- matrix(model.data[, 1], ncol = 1)
X <- matrix(model.data[, -1], nrow = n_obser)
X <- as.matrix(model.data[, -1])
View(fake_data2)
View(fake_data2)
laten_factor <- c('lnsize', 'cashR')
laten_factor <- ~ lnsize + cashR
rm(latent_factor)
rm(laten_factor)
latent_factor <- ~ lnsize + cashR
L.data <- model.frame(latent_factor, data)
L.data
L <- as.matrix(L.data)
init_para <- rep(1, 4)
if (!is.matrix(init_para)){
init_para <- matrix(init_para, ncol = 1)
}
init_latent <- c(2, 3)
if (!is.matrix(init_latent)){
init_latent <- matrix(init_latent, ncol = 1)
}
?rtmvnorm
L %*% init_latent
id <- model.frame(id ~ , data)
id <- model.frame(as.formula('id ~ '), data)
id <- model.frame(as.formula('~ id'), data)
id <- model.frame(as.formula('~ fake_id'), data)
id
test <- id
test <- as.factor(id)
sort(id)
class(id)
names(id)
as.list(id)
test <- as.list(id)
test <- as.factor(id)
test <- factor(id)
sort(test)
ind <- sample.int(100, 20, replace = T)
ind
ind <- sample.int(26, 20, replace = T)
test <- as.factor(letters[ind])
test
test <- as.factor(letters[ind], levels = letters)
test <- as.factor(letters[ind], level = letters)
test <- factor(letters[ind], levels = letters)
test
attributes(test) <- NULL
class(test)
rm(list = ls())
load("~/Documents/SChang(2011)/panal/fake_data.RData")
ind <- order(fake_data[, 'fake_id'], fake_data[, 'year'])
fake_data <- fake_data[ind, ]
View(fake_data)
library("EMmodel", lib.loc="/Library/Frameworks/R.framework/Versions/3.0/Resources/library")
remove.packages("EMmodel")
install.packages("~/Documents/SChang(2011)/panal/EMmodel_1.0.14.tar.gz", repos = NULL, type = "source")
rm(list = ls())
library('EMmodel')
fake_panel_data <- read.csv("~/Documents/SChang(2011)/panal/fake_panel_data.csv")
View(fake_panel_data)
fo <- ln_invst ~ W + ln_invst_L + lnS + lnSL
fl <- ~ lnsize + cashR
init_par <- c(-1.25, 0.73, 0.64, 0.84, -0.46, 0.53, 0.57, 0.83, 1, 1.8, 0.86)
seed <- 3690
data <- fake_panel_data[fake_panel_data[, 'year'] == 2003, ]
Lower <- rep(0, 196)
tol <- 1e-8
algorithm <- 'gibbs'
intersect <- T
optim_lower <- c(rep(-Inf, 8), 0, 0, -0.9)
optim_upper <- c(rep(Inf, 8), Inf, Inf, 0.9)
test <- EMmodel.panel(fo = fo, fl = fl, data = data, init_par = init_par,
seed = seed, Lower = Lower, optim_lower = optim_lower,
optim_upper = optim_upper, tol = tol,
intersect = intersect, trace = T)
init_par <- c(-1.25, 0.73, 0.64, 0.84, -0.46, 0.53, 0.57, 0.83, 1, 0.1, 0.86)
rm(list = ls())
library('EMmodel')
fake_panel_data <- read.csv("./fake_panel_data.csv")
fo <- ln_invst ~ W + ln_invst_L + lnS + lnSL
fake_panel_data <- read.csv("~/Documents/SChang(2011)/panal/fake_panel_data.csv")
View(fake_panel_data)
fo <- ln_invst ~ W + ln_invst_L + lnS + lnSL
fl <- ~ lnsize + cashR
#init_par <- c(-1.25, 0.73, 0.64, 0.84, -0.46, 0.53, 0.57, 0.83, 1, 1.8, 0.86)
init_par <- c(-1.21, 0.374, 0.598, 0.4, 0.119, -3.81, 0.283, 0.696, 0.03, 0.335)
seed <- 3690
data <- fake_panel_data[fake_panel_data[, 'year'] == 2003, ]
Lower <- rep(0, 196)
tol <- 1e-8
algorithm <- 'gibbs'
intersect <- T
optim_lower <- c(rep(-Inf, 8), 0, 0.01, -0.9)
optim_upper <- c(rep(Inf, 8), Inf, Inf, 0.9)
test <- EMmodel.panel(fo = fo, fl = fl, data = data, init_par = init_par,
seed = seed, Lower = Lower, optim_lower = optim_lower,
optim_upper = optim_upper, tol = tol,
intersect = intersect, trace = T)
init_par <- c(-1.21, 0.374, 0.598, 0.4, 0.119, -3.81, 0.283, 0.696, 2, 0.03, 0.335)
seed <- 3690
data <- fake_panel_data[fake_panel_data[, 'year'] == 2003, ]
Lower <- rep(0, 196)
tol <- 1e-8
algorithm <- 'gibbs'
intersect <- T
optim_lower <- c(rep(-Inf, 8), 0, 0.01, -0.9)
optim_upper <- c(rep(Inf, 8), Inf, Inf, 0.9)
test <- EMmodel.panel(fo = fo, fl = fl, data = data, init_par = init_par,
seed = seed, Lower = Lower, optim_lower = optim_lower,
optim_upper = optim_upper, tol = tol,
intersect = intersect, trace = T)
init_par <- c(-1.21, 0.374, 0.598, 0.4, 0.119, -3.81, 0.283, 0.696, 2, 0.1, 0.335)
seed <- 3690
data <- fake_panel_data[fake_panel_data[, 'year'] == 2003, ]
Lower <- rep(0, 196)
tol <- 1e-8
algorithm <- 'gibbs'
intersect <- T
optim_lower <- c(rep(-Inf, 8), 0, 0.01, -0.9)
optim_upper <- c(rep(Inf, 8), Inf, Inf, 0.9)
test <- EMmodel.panel(fo = fo, fl = fl, data = data, init_par = init_par,
seed = seed, Lower = Lower, optim_lower = optim_lower,
optim_upper = optim_upper, tol = tol,
intersect = intersect, trace = T)
optim_lower <- c(rep(-Inf, 8), 0, 0.2, -0.9)
optim_upper <- c(rep(Inf, 8), Inf, Inf, 0.9)
test <- EMmodel.panel(fo = fo, fl = fl, data = data, init_par = init_par,
seed = seed, Lower = Lower, optim_lower = optim_lower,
optim_upper = optim_upper, tol = tol,
intersect = intersect, trace = T)
#install.packages("~/Documents/SChang(2011)/panal/EMmodel_1.0.16.tar.gz", repos = NULL, type = "source")
# Example for EMmodel.panel using fake_panel_data
rm(list = ls())
library('EMmodel')
fake_panel_data <- read.csv("./fake_panel_data.csv")
fo <- ln_invst ~ W + ln_invst_L + lnS + lnSL
fl <- ~ lnsize + cashR
#init_par <- c(-1.25, 0.73, 0.64, 0.84, -0.46, 0.53, 0.57, 0.83, 1, 1.8, 0.86)
init_par <- c(-1.21, 0.374, 0.598, 0.4, 0.119, -3.81, 0.283, 0.696, 2, 0.3, 0.335)
seed <- 3690
data <- fake_panel_data[fake_panel_data[, 'year'] == 2003, ]
Lower <- rep(0, 196)
tol <- 1e-30
algorithm <- 'gibbs'
intersect <- T
optim_lower <- c(rep(-Inf, 8), 0, 0.2, -0.9)
optim_upper <- c(rep(Inf, 8), Inf, Inf, 0.9)
test <- EMmodel.panel(fo = fo, fl = fl, data = data, init_par = init_par,
seed = seed, Lower = Lower, optim_lower = optim_lower,
optim_upper = optim_upper, tol = tol,
intersect = intersect, trace = T)
fake_panel_data <- read.csv("~/Documents/SChang(2011)/panal/fake_panel_data.csv")
View(fake_panel_data)
fo <- ln_invst ~ W + ln_invst_L + lnS + lnSL
fl <- ~ lnsize + cashR
#init_par <- c(-1.25, 0.73, 0.64, 0.84, -0.46, 0.53, 0.57, 0.83, 1, 1.8, 0.86)
init_par <- c(-1.21, 0.374, 0.598, 0.4, 0.119, -3.81, 0.283, 0.696, 2, 0.3, 0.335)
seed <- 3690
data <- fake_panel_data[fake_panel_data[, 'year'] == 2003, ]
Lower <- rep(0, 196)
tol <- 1e-30
algorithm <- 'gibbs'
intersect <- T
optim_lower <- c(rep(-Inf, 8), 0, 0.2, -0.9)
optim_upper <- c(rep(Inf, 8), Inf, Inf, 0.9)
test <- EMmodel.panel(fo = fo, fl = fl, data = data, init_par = init_par,
seed = seed, Lower = Lower, optim_lower = optim_lower,
optim_upper = optim_upper, tol = tol,
intersect = intersect, trace = T)
init_par <- c(-1.21, 0.374, 0.598, 0.4, 0.119, -3.81, 0.283, 0.696, 2, 0.3, 0.335)
seed <- 3690
data <- fake_panel_data[fake_panel_data[, 'year'] == 2003, ]
Lower <- rep(0, 196)
tol <- 1e-30
algorithm <- 'gibbs'
intersect <- T
optim_lower <- c(rep(-Inf, 8), 0, 0.3, -0.9)
optim_upper <- c(rep(Inf, 8), Inf, Inf, 0.9)
test <- EMmodel.panel(fo = fo, fl = fl, data = data, init_par = init_par,
seed = seed, Lower = Lower, optim_lower = optim_lower,
optim_upper = optim_upper, tol = tol,
intersect = intersect, trace = T)
rm(list=ls())
library('slidify')
library('whisker')
setwd("~/Documents/R_scripts/Slidify")
author('MLDM_RBasic')
slidify('index.Rmd')
if (!is.loaded('e1071')) library('e1071')
if (!is.loaded('MASS')) library('MASS')
data(iris)
X <- subset(iris, select = -Species)
y <- iris$Species
ind1 <- which(iris[, "Species"] == "setosa" | iris[, 'Species'] == "versicolor")
X1 <- X[ind1, ]
#Intersect <- rep(1, dim(X1)[1])
#X1 <- cbind(Intersect, X1)
y1 <- y[ind1]
y1 <- factor(y1, levels = c("setosa", 'versicolor'))
data1 <- cbind(X1, y1)
ind2 <- which(iris[, "Species"] == "setosa" | iris[, 'Species'] == "virginica")
X2 <- X[ind2, ]
#ones <- rep(1, dim(X2)[1])
#X2 <- cbind(ones, X2)
y2 <- y[ind2]
y2 <- factor(y2, levels = c("setosa", 'virginica'))
data2 <- cbind(X2, y2)
ind3 <- which(iris[, "Species"] == "versicolor" | iris[, 'Species'] == "virginica")
X3 <- X[ind3, ]
#ones <- rep(1, dim(X3)[1])
#X3 <- cbind(ones, X3)
y3 <- y[ind3]
y3 <- factor(y3, levels = c('versicolor', 'virginica'))
data3 <- cbind(X3, y3)
model0 <- svm(Species ~ ., data = iris, kernel = 'linear', scale = F)
model1 <- svm(y1 ~ ., data = data1, kernel = 'linear', scale = F)
model2 <- svm(y2 ~ ., data = data2, kernel = 'linear', scale = F)
model3 <- svm(y3 ~ ., data = data3, kernel = 'linear', scale = F)
plot(model1, data1, Petal.Length ~ Petal.Width,
slice = list(Sepal.Width = 3, Sepal.Length = -4),color.palette = terrain.colors)
plot(model2, data2, Petal.Width ~ Petal.Length,
slice = list(Sepal.Width = 3, Sepal.Length = 4),color.palette = topo.colors)
plot(model3, data3, Petal.Width ~ Petal.Length,
slice = list(Sepal.Width = 3, Sepal.Length = 4),color.palette = topo.colors)
predict1 <- predict(model1, subset(data1, select = -y1))
table(predict1, y1)
coef1 <- matrix(model1$coefs, nrow = 1)
w1 <- rbind(-model1$rho, t(coef1 %*% model1$SV))
(test <- (cbind(1,as.matrix(X1)) %*% w1)[model1$index])
predict2 <- predict(model2, subset(data2, select = -y2))
table(predict2, y2)
coef2 <- matrix(model2$coefs, nrow = 1)
w2 <- t(coef2 %*% model2$SV)
predict3 <- predict(model3, subset(data3, select = -y3))
table(predict3, y3)
coef3 <- matrix(model3$coefs, nrow = 1)
w3 <- t(coef3 %*% model3$SV)
slice = list(Sepal.Width = 3, Sepal.Length = -4),color.palette = topo.colors)
plot(model1, data1, Petal.Length ~ Petal.Width,
slice = list(Sepal.Width = 3, Sepal.Length = -4),color.palette = topo.colors)
plot(model1, data1, Petal.Length ~ Petal.Width,
slice = list(Sepal.Width = 3, Sepal.Length = -4),color.palette = terrian.colors)
plot(model1, data1, Petal.Length ~ Petal.Width,
slice = list(Sepal.Width = 3, Sepal.Length = -4),color.palette = terrain.colors)
plot(model1, data1, Petal.Length ~ Petal.Width,
slice = list(Sepal.Width = 3, Sepal.Length = -4),color.palette = terrain.colors)
rm(list=ls())
if (!is.loaded('e1071')) library('e1071')
if (!is.loaded('MASS')) library('MASS')
data(iris)
X <- subset(iris, select = -Species)
y <- iris$Species
ind1 <- which(iris[, "Species"] == "setosa" | iris[, 'Species'] == "versicolor")
X1 <- X[ind1, ]
#Intersect <- rep(1, dim(X1)[1])
#X1 <- cbind(Intersect, X1)
y1 <- y[ind1]
y1 <- factor(y1, levels = c("setosa", 'versicolor'))
data1 <- cbind(X1, y1)
ind2 <- which(iris[, "Species"] == "setosa" | iris[, 'Species'] == "virginica")
X2 <- X[ind2, ]
#ones <- rep(1, dim(X2)[1])
#X2 <- cbind(ones, X2)
y2 <- y[ind2]
y2 <- factor(y2, levels = c("setosa", 'virginica'))
data2 <- cbind(X2, y2)
ind3 <- which(iris[, "Species"] == "versicolor" | iris[, 'Species'] == "virginica")
X3 <- X[ind3, ]
#ones <- rep(1, dim(X3)[1])
#X3 <- cbind(ones, X3)
y3 <- y[ind3]
y3 <- factor(y3, levels = c('versicolor', 'virginica'))
data3 <- cbind(X3, y3)
model0 <- svm(Species ~ ., data = iris, kernel = 'linear', scale = F)
model1 <- svm(y1 ~ ., data = data1, kernel = 'linear', scale = F)
model2 <- svm(y2 ~ ., data = data2, kernel = 'linear', scale = F)
model3 <- svm(y3 ~ ., data = data3, kernel = 'linear', scale = F)
plot(model1, data1, Petal.Length ~ Petal.Width,
slice = list(Sepal.Width = 3, Sepal.Length = -4),color.palette = terrain.colors)
plot(model2, data2, Petal.Width ~ Petal.Length,
slice = list(Sepal.Width = 3, Sepal.Length = 4),color.palette = topo.colors)
plot(model3, data3, Petal.Width ~ Petal.Length,
slice = list(Sepal.Width = 3, Sepal.Length = 4),color.palette = topo.colors)
predict1 <- predict(model1, subset(data1, select = -y1))
table(predict1, y1)
coef1 <- matrix(model1$coefs, nrow = 1)
w1 <- rbind(-model1$rho, t(coef1 %*% model1$SV))
(test <- (cbind(1,as.matrix(X1)) %*% w1)[model1$index])
predict2 <- predict(model2, subset(data2, select = -y2))
table(predict2, y2)
coef2 <- matrix(model2$coefs, nrow = 1)
w2 <- t(coef2 %*% model2$SV)
predict3 <- predict(model3, subset(data3, select = -y3))
table(predict3, y3)
coef3 <- matrix(model3$coefs, nrow = 1)
w3 <- t(coef3 %*% model3$SV)
