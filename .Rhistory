tol <- 1e-8
algorithm <- 'gibbs'
intersect <- T
optim_lower <- c(rep(-Inf, 8), 0, 0.01, -0.9)
optim_upper <- c(rep(Inf, 8), Inf, Inf, 0.9)
test <- EMmodel.panel(fo = fo, fl = fl, data = data, init_par = init_par,
seed = seed, Lower = Lower, optim_lower = optim_lower,
optim_upper = optim_upper, tol = tol,
intersect = intersect, trace = T)
init_par <- c(-1.21, 0.374, 0.598, 0.4, 0.119, -3.81, 0.283, 0.696, 2, 0.03, 0.335)
seed <- 3690
data <- fake_panel_data[fake_panel_data[, 'year'] == 2003, ]
Lower <- rep(0, 196)
tol <- 1e-8
algorithm <- 'gibbs'
intersect <- T
optim_lower <- c(rep(-Inf, 8), 0, 0.01, -0.9)
optim_upper <- c(rep(Inf, 8), Inf, Inf, 0.9)
test <- EMmodel.panel(fo = fo, fl = fl, data = data, init_par = init_par,
seed = seed, Lower = Lower, optim_lower = optim_lower,
optim_upper = optim_upper, tol = tol,
intersect = intersect, trace = T)
init_par <- c(-1.21, 0.374, 0.598, 0.4, 0.119, -3.81, 0.283, 0.696, 2, 0.1, 0.335)
seed <- 3690
data <- fake_panel_data[fake_panel_data[, 'year'] == 2003, ]
Lower <- rep(0, 196)
tol <- 1e-8
algorithm <- 'gibbs'
intersect <- T
optim_lower <- c(rep(-Inf, 8), 0, 0.01, -0.9)
optim_upper <- c(rep(Inf, 8), Inf, Inf, 0.9)
test <- EMmodel.panel(fo = fo, fl = fl, data = data, init_par = init_par,
seed = seed, Lower = Lower, optim_lower = optim_lower,
optim_upper = optim_upper, tol = tol,
intersect = intersect, trace = T)
optim_lower <- c(rep(-Inf, 8), 0, 0.2, -0.9)
optim_upper <- c(rep(Inf, 8), Inf, Inf, 0.9)
test <- EMmodel.panel(fo = fo, fl = fl, data = data, init_par = init_par,
seed = seed, Lower = Lower, optim_lower = optim_lower,
optim_upper = optim_upper, tol = tol,
intersect = intersect, trace = T)
#install.packages("~/Documents/SChang(2011)/panal/EMmodel_1.0.16.tar.gz", repos = NULL, type = "source")
# Example for EMmodel.panel using fake_panel_data
rm(list = ls())
library('EMmodel')
fake_panel_data <- read.csv("./fake_panel_data.csv")
fo <- ln_invst ~ W + ln_invst_L + lnS + lnSL
fl <- ~ lnsize + cashR
#init_par <- c(-1.25, 0.73, 0.64, 0.84, -0.46, 0.53, 0.57, 0.83, 1, 1.8, 0.86)
init_par <- c(-1.21, 0.374, 0.598, 0.4, 0.119, -3.81, 0.283, 0.696, 2, 0.3, 0.335)
seed <- 3690
data <- fake_panel_data[fake_panel_data[, 'year'] == 2003, ]
Lower <- rep(0, 196)
tol <- 1e-30
algorithm <- 'gibbs'
intersect <- T
optim_lower <- c(rep(-Inf, 8), 0, 0.2, -0.9)
optim_upper <- c(rep(Inf, 8), Inf, Inf, 0.9)
test <- EMmodel.panel(fo = fo, fl = fl, data = data, init_par = init_par,
seed = seed, Lower = Lower, optim_lower = optim_lower,
optim_upper = optim_upper, tol = tol,
intersect = intersect, trace = T)
fake_panel_data <- read.csv("~/Documents/SChang(2011)/panal/fake_panel_data.csv")
View(fake_panel_data)
fo <- ln_invst ~ W + ln_invst_L + lnS + lnSL
fl <- ~ lnsize + cashR
#init_par <- c(-1.25, 0.73, 0.64, 0.84, -0.46, 0.53, 0.57, 0.83, 1, 1.8, 0.86)
init_par <- c(-1.21, 0.374, 0.598, 0.4, 0.119, -3.81, 0.283, 0.696, 2, 0.3, 0.335)
seed <- 3690
data <- fake_panel_data[fake_panel_data[, 'year'] == 2003, ]
Lower <- rep(0, 196)
tol <- 1e-30
algorithm <- 'gibbs'
intersect <- T
optim_lower <- c(rep(-Inf, 8), 0, 0.2, -0.9)
optim_upper <- c(rep(Inf, 8), Inf, Inf, 0.9)
test <- EMmodel.panel(fo = fo, fl = fl, data = data, init_par = init_par,
seed = seed, Lower = Lower, optim_lower = optim_lower,
optim_upper = optim_upper, tol = tol,
intersect = intersect, trace = T)
init_par <- c(-1.21, 0.374, 0.598, 0.4, 0.119, -3.81, 0.283, 0.696, 2, 0.3, 0.335)
seed <- 3690
data <- fake_panel_data[fake_panel_data[, 'year'] == 2003, ]
Lower <- rep(0, 196)
tol <- 1e-30
algorithm <- 'gibbs'
intersect <- T
optim_lower <- c(rep(-Inf, 8), 0, 0.3, -0.9)
optim_upper <- c(rep(Inf, 8), Inf, Inf, 0.9)
test <- EMmodel.panel(fo = fo, fl = fl, data = data, init_par = init_par,
seed = seed, Lower = Lower, optim_lower = optim_lower,
optim_upper = optim_upper, tol = tol,
intersect = intersect, trace = T)
rm(list=ls())
if (!is.loaded('e1071')) library('e1071')
if (!is.loaded('MASS')) library('MASS')
data(iris)
X <- subset(iris, select = -Species)
y <- iris$Species
ind1 <- which(iris[, "Species"] == "setosa" | iris[, 'Species'] == "versicolor")
X1 <- X[ind1, ]
#Intersect <- rep(1, dim(X1)[1])
#X1 <- cbind(Intersect, X1)
y1 <- y[ind1]
y1 <- factor(y1, levels = c("setosa", 'versicolor'))
data1 <- cbind(X1, y1)
ind2 <- which(iris[, "Species"] == "setosa" | iris[, 'Species'] == "virginica")
X2 <- X[ind2, ]
#ones <- rep(1, dim(X2)[1])
#X2 <- cbind(ones, X2)
y2 <- y[ind2]
y2 <- factor(y2, levels = c("setosa", 'virginica'))
data2 <- cbind(X2, y2)
ind3 <- which(iris[, "Species"] == "versicolor" | iris[, 'Species'] == "virginica")
X3 <- X[ind3, ]
#ones <- rep(1, dim(X3)[1])
#X3 <- cbind(ones, X3)
y3 <- y[ind3]
y3 <- factor(y3, levels = c('versicolor', 'virginica'))
data3 <- cbind(X3, y3)
model0 <- svm(Species ~ ., data = iris, kernel = 'linear', scale = F)
model1 <- svm(y1 ~ ., data = data1, kernel = 'linear', scale = F)
model2 <- svm(y2 ~ ., data = data2, kernel = 'linear', scale = F)
model3 <- svm(y3 ~ ., data = data3, kernel = 'linear', scale = F)
plot(model1, data1, Petal.Length ~ Petal.Width,
slice = list(Sepal.Width = 3, Sepal.Length = -4),color.palette = terrain.colors)
plot(model1, data1, Petal.Length ~ Sepal.Width,
slice = list(Petal.Width = 3, Sepal.Length = -4),color.palette = terrain.colors)
plot(model1, data1, Sepal.Length ~ Petal.Width,
slice = list(Sepal.Width = 3, Petal.Length = -4),color.palette = terrain.colors)
plot(model1, data1, Petal.Length ~ Petal.Width,
slice = list(Sepal.Width = 3, Sepal.Length = -4),color.palette = terrain.colors)
table(predict1, y1)
rm(list=ls())
if (!is.loaded('e1071')) library('e1071')
if (!is.loaded('MASS')) library('MASS')
data(iris)
X <- subset(iris, select = -Species)
y <- iris$Species
ind1 <- which(iris[, "Species"] == "setosa" | iris[, 'Species'] == "versicolor")
X1 <- X[ind1, ]
#Intersect <- rep(1, dim(X1)[1])
#X1 <- cbind(Intersect, X1)
y1 <- y[ind1]
y1 <- factor(y1, levels = c("setosa", 'versicolor'))
data1 <- cbind(X1, y1)
ind2 <- which(iris[, "Species"] == "setosa" | iris[, 'Species'] == "virginica")
X2 <- X[ind2, ]
#ones <- rep(1, dim(X2)[1])
#X2 <- cbind(ones, X2)
y2 <- y[ind2]
y2 <- factor(y2, levels = c("setosa", 'virginica'))
data2 <- cbind(X2, y2)
ind3 <- which(iris[, "Species"] == "versicolor" | iris[, 'Species'] == "virginica")
X3 <- X[ind3, ]
#ones <- rep(1, dim(X3)[1])
#X3 <- cbind(ones, X3)
y3 <- y[ind3]
y3 <- factor(y3, levels = c('versicolor', 'virginica'))
data3 <- cbind(X3, y3)
model0 <- svm(Species ~ ., data = iris, kernel = 'linear', scale = F)
model1 <- svm(y1 ~ ., data = data1, kernel = 'linear', scale = F)
model2 <- svm(y2 ~ ., data = data2, kernel = 'linear', scale = F)
model3 <- svm(y3 ~ ., data = data3, kernel = 'linear', scale = F)
plot(model1, data1, Petal.Length ~ Petal.Width,
slice = list(Sepal.Width = 3, Sepal.Length = -4),color.palette = terrain.colors)
plot(model2, data2, Petal.Width ~ Petal.Length,
slice = list(Sepal.Width = 3, Sepal.Length = 4),color.palette = topo.colors)
plot(model3, data3, Petal.Width ~ Petal.Length,
slice = list(Sepal.Width = 3, Sepal.Length = 4),color.palette = topo.colors)
predict1 <- predict(model1, subset(data1, select = -y1))
table(predict1, y1)
coef1 <- matrix(model1$coefs, nrow = 1)
w1 <- rbind(-model1$rho, t(coef1 %*% model1$SV))
(test <- (cbind(1,as.matrix(X1)) %*% w1)[model1$index])
predict2 <- predict(model2, subset(data2, select = -y2))
table(predict2, y2)
coef2 <- matrix(model2$coefs, nrow = 1)
w2 <- t(coef2 %*% model2$SV)
predict3 <- predict(model3, subset(data3, select = -y3))
table(predict3, y3)
coef3 <- matrix(model3$coefs, nrow = 1)
w3 <- t(coef3 %*% model3$SV)
table(predict1, y1)
table(predict2, y2)
table(predict3, y3)
model0 <- svm(Species ~ ., data = iris, kernel = 'linear', scale = F)
model1 <- svm(y1 ~ ., data = data1, kernel = 'linear', scale = F)
model2 <- svm(y2 ~ ., data = data2, kernel = 'linear', scale = F)
model3 <- svm(y3 ~ ., data = data3, kernel = 'radial', scale = F)
predict3 <- predict(model3, subset(data3, select = -y3))
table(predict3, y3)
model0 <- svm(Species ~ ., data = iris, kernel = "radial", scale = F)
model1 <- svm(y1 ~ ., data = data1, kernel = 'linear', scale = F)
model2 <- svm(y2 ~ ., data = data2, kernel = 'linear', scale = F)
model3 <- svm(y3 ~ ., data = data3, kernel = 'linear', scale = F)
predict0 <- predict(model0, subset(iris, select=-Species))
predict0 <- predict(model0, subset(iris, select=-Species))
table(predict0, iris[, "Species"])
rm(list=ls())
library('slidify')
library('whisker')
setwd("~/Documents/R_scripts/Slidify")
author('MLDM_RBasic')
slidify('index.Rmd')
publish(username = 'dboyliao', repo = 'MLDM_RBasic')
slidify('index.Rmd')
publish(username = 'dboyliao', repo = 'MLDM_RBasic')
slidify('index.Rmd')
publish(username = 'dboyliao', repo = 'MLDM_RBasic')
slidify('index.Rmd')
publish(username = 'dboyliao', repo = 'MLDM_RBasic')
slidify('index.Rmd')
publish(username = 'dboyliao', repo = 'MLDM_RBasic')
slidify('index.Rmd')
slidify('index.Rmd')
slidify('index.Rmd')
slidify('index.Rmd')
publish(username = 'dboyliao', repo = 'MLDM_RBasic')
slidify('index.Rmd')
publish(username = 'dboyliao', repo = 'MLDM_RBasic')
slidify('index.Rmd')
publish(username = 'dboyliao', repo = 'MLDM_RBasic')
slidify('index.Rmd')
publish(username = 'dboyliao', repo = 'MLDM_RBasic')
slidify('index.Rmd')
publish(username = 'dboyliao', repo = 'MLDM_RBasic')
slidify('index.Rmd')
publish(username = 'dboyliao', repo = 'MLDM_RBasic')
system("say 'hello world'")
for (i in 1:10){
system("say 'Nan Wu Ah Mi Tow Fo'")
}
slidify('index.Rmd')
publish(username = 'dboyliao', repo = 'MLDM_RBasic')
for (i in 1:10){
system("say 'Nan Wu Ah Mi Tow Fo'")
}
for (i in 1:5){
system("say 'Nan Mo Ah Mi Tow Fo'")
}
for (i in 1:5){
system("say 'Nan Mo Ah Mi Tow Fo'")
}
for (i in 1:1){
system("say 'Nan Mo Ah Mi Tow Fo'")
}
for (i in 1:1){
system("say 'Nang Moll Ah Mi Tow Fo'")
}
for (i in 1:1){
system("say 'Nang Mol Ah Mi Tow Fo'")
}
for (i in 1:1){
system("say 'Nann Mor Ah Mi Tow Fo'")
}
for (i in 1:1){
system("say 'Nann Moll Ah Mi Tow Fo'")
}
for (i in 1:1){
system("say 'Nann Moll Ah Mi Tow Fo'")
}
system("say 'Avalokitesvara'")
system("say 'Ah Men'")
slidify('index.Rmd')
publish(username = 'dboyliao', repo = 'MLDM_RBasic')
system('say "Goodbye my love wo di i ren"')
system('say "Goodbye my love wo di i ren Jie Jen"')
system('say "Goodbye my love wo di i ren Jie Jen"')
for (i in 1:10){
system("say 'Nann Moll Ah Mi Tow Fo'")
system("say 'Ah Men'")
}
for (i in 1:5){
system("say 'Nann Moll Ah Mi Tow Fo'")
system("say 'Ah Men'")
}
slidify('index.Rmd')
publish(username = 'dboyliao', repo = 'MLDM_RBasic')
for (i in 1:5){
system("say 'Nann Moll Ah Mi Tow Fo'")
system("say 'Ah Men'")
}
for (i in 1:5){
system("say 'Nann Moll Ah Mi Tow Fo'")
system("say 'Ah Men'")
}
for (i in 1:5){
system("say 'Nann Moll Ah Mi Tow Fo'")
system("say 'Ah Men'")
}
library("Matrix", lib.loc="/Library/Frameworks/R.framework/Versions/3.0/Resources/library")
ind
i
load("~/Dropbox/Public/MLDM Monday/RBasic/MLDM_RBasic_ForLoop_Ex.RData")
rm(list=ls())
load("~/Dropbox/Public/MLDM Monday/RBasic/MLDM_RBasic_ForLoop_Ex.RData")
slidify('index.Rmd')
i <- 33
if (sum(X1[i,]*magic_vector) >= 0){
print('setosa')
print(y1[i])
}else{
print('versicolor')
print(y1[i])
}
i <- 33
i <- 33
if (sum(X1[i,]*magic_vector) >= 0){
print('setosa')
print(y1[i])
}else{
print('versicolor')
print(y1[i])
}
i <- 13
if (sum(X1[i,]*magic_vector) >= 0){
print('setosa')
print(y1[i])
}else{
print('versicolor')
print(y1[i])
}
i <- 99
if (sum(X1[i,]*magic_vector) >= 0){
print('setosa')
print(y1[i])
}else{
print('versicolor')
print(y1[i])
}
rm(list=ls())
if (!is.loaded('e1071')) library('e1071')
if (!is.loaded('MASS')) library('MASS')
data(iris)
X <- subset(iris, select = -Species)
y <- iris$Species
ind1 <- which(iris[, "Species"] == "setosa" | iris[, 'Species'] == "versicolor")
X1 <- X[ind1, ]
Intersect <- rep(1, dim(X1)[1])
X1 <- cbind(Intersect, X1)
y1 <- y[ind1]
y1 <- factor(y1, levels = c("setosa", 'versicolor'))
data1 <- cbind(X1, y1)
rm(data1)
rm(X)
rm(ind1)
rm(y)
rm(Intersect)
save.image("~/Dropbox/Public/MLDM Monday/RBasic/MLDM_RBasic_ForLoop_Ex.RData")
X1
Bob[1,3]
slidify('index.Rmd')
Bob[1,3]
Bob[c(1,3)]
iris[5, 4]
iris[5, 3]
iris[5, "Petal.Length"]
X1[i, ]
X1[, 3]
Species
Species2
indicator = runif(1,0,1)
?plot
?matrix
??matrix
rm(list = ls())
set.seed(3690)
# 設定起始點為 (0, 0) 的行向量。(以矩陣表示)
p = matrix(c(0, 0), ncol = 1)
# 建立名為 coord 的 data.frame。
coord = rbind(data.frame(), t(p))
coord
rm(list = ls())
set.seed(3690)
# 設定起始點為 (0, 0) 的行向量。(以矩陣表示)
p = matrix(c(0, 0), ncol = 1)
# 建立名為 coord 的 data.frame。
coord = rbind(data.frame(), t(p))
for (i in 40000) {
# 從 uniform(0, 1) 中抽取 indicator 決定當次遞迴式。
indicator = runif(1,0,1)
if (indicator <= 0.05) {
m = matrix(c(0, 0, 0, 0.16), 2, 2)
const = matrix(c(0, 0), ncol = 1)
} else if (0.05 < indicator <= 0.86) {
m = matrix(c(0.85, -0.04, 0.04, 0.85), nrow = 2, ncol = 2)
const = matrix(c(0, 1.6), ncol = 1)
} else if (0.86 < indicator <= 0.93) {
m = matrix(c(0.2, 0.23, -0.26, 0.22), 2, 2)
const = matrix(c(0, 0.16), ncol = 1)
} else {
m = matrix(c(-0.15, 0.26, 0.28, 0.24), 2, 2)
const = matrix(c(0, 0.44), ncol = 1)
}
# 根據遞迴式計算新的 p 坐標值。
p = m %*% p + const
# 將新的 p 點坐標合併至 coord 中。
coord = rbind(coord, p)
}
# 作圖。
plot(x = coord[, 2], y = coord[, 1], plt = c(0, 10, -5, 5), cex = 0.1, asp = 1)
indicator = runif(1,0,1)
if (indicator <= 0.05) {
m = matrix(c(0, 0, 0, 0.16), 2, 2)
const = matrix(c(0, 0), ncol = 1)
} else if (0.05 < indicator <= 0.86) {
m = matrix(c(0.85, -0.04, 0.04, 0.85), nrow = 2, ncol = 2)
const = matrix(c(0, 1.6), ncol = 1)
} else if (0.86 < indicator <= 0.93) {
m = matrix(c(0.2, 0.23, -0.26, 0.22), 2, 2)
const = matrix(c(0, 0.16), ncol = 1)
} else {
indicator = runif(1,0,1)
if (indicator <= 0.05) {
m = matrix(c(0, 0, 0, 0.16), 2, 2)
const = matrix(c(0, 0), ncol = 1)
} else if (0.05 < indicator <= 0.86) {
if (indicator <= 0.05){
m = matrix(c(0, 0, 0, 0.16), 2, 2)
const = matrix(c(0, 0), ncol = 1)
}else if (0.05 < indicator <= 0.86){
m = matrix(c(0.85, -0.04, 0.04, 0.85), nrow = 2, ncol = 2)
const = matrix(c(0, 1.6), ncol = 1)
indicator = runif(1,0,1)
if (indicator <= 0.05){
m = matrix(c(0, 0, 0, 0.16), 2, 2)
const = matrix(c(0, 0), ncol = 1)
}else if (0.05 < indicator & indicator <= 0.86){
m = matrix(c(0.85, -0.04, 0.04, 0.85), nrow = 2, ncol = 2)
const = matrix(c(0, 1.6), ncol = 1)
} else if (0.86 < indicator & indicator <= 0.93){
m = matrix(c(0.2, 0.23, -0.26, 0.22), 2, 2)
const = matrix(c(0, 0.16), ncol = 1)
} else{
m = matrix(c(-0.15, 0.26, 0.28, 0.24), 2, 2)
const = matrix(c(0, 0.44), ncol = 1)
}
# 根據遞迴式計算新的 p 坐標值。
p = m %*% p + const
coord = rbind(coord, p)
coord = rbind(coord, t(p))
rm(list = ls())
set.seed(3690)
# 設定起始點為 (0, 0) 的行向量。(以矩陣表示)
p = matrix(c(0, 0), ncol = 1)
# 建立名為 coord 的 data.frame。
coord = rbind(data.frame(), t(p))
for (i in 40000) {
# 從 uniform(0, 1) 中抽取 indicator 決定當次遞迴式。
indicator = runif(1,0,1)
if (indicator <= 0.05){
m = matrix(c(0, 0, 0, 0.16), 2, 2)
const = matrix(c(0, 0), ncol = 1)
}else if (0.05 < indicator & indicator <= 0.86){
m = matrix(c(0.85, -0.04, 0.04, 0.85), nrow = 2, ncol = 2)
const = matrix(c(0, 1.6), ncol = 1)
} else if (0.86 < indicator & indicator <= 0.93){
m = matrix(c(0.2, 0.23, -0.26, 0.22), 2, 2)
const = matrix(c(0, 0.16), ncol = 1)
} else{
m = matrix(c(-0.15, 0.26, 0.28, 0.24), 2, 2)
const = matrix(c(0, 0.44), ncol = 1)
}
# 根據遞迴式計算新的 p 坐標值。
p = m %*% p + const
# 將新的 p 點坐標合併至 coord 中。
coord = rbind(coord, t(p))
}
# 作圖。
plot(x = coord[, 2], y = coord[, 1], plt = c(0, 10, -5, 5), cex = 0.1, asp = 1)
rm(list = ls())
set.seed(3690)
# 設定起始點為 (0, 0) 的行向量。(以矩陣表示)
p = matrix(c(0, 0), ncol = 1)
# 建立名為 coord 的 data.frame。
coord = rbind(data.frame(), t(p))
for (i in 1:40000) {
# 從 uniform(0, 1) 中抽取 indicator 決定當次遞迴式。
indicator = runif(1,0,1)
if (indicator <= 0.05){
m = matrix(c(0, 0, 0, 0.16), 2, 2)
const = matrix(c(0, 0), ncol = 1)
}else if (0.05 < indicator & indicator <= 0.86){
m = matrix(c(0.85, -0.04, 0.04, 0.85), nrow = 2, ncol = 2)
const = matrix(c(0, 1.6), ncol = 1)
} else if (0.86 < indicator & indicator <= 0.93){
m = matrix(c(0.2, 0.23, -0.26, 0.22), 2, 2)
const = matrix(c(0, 0.16), ncol = 1)
} else{
m = matrix(c(-0.15, 0.26, 0.28, 0.24), 2, 2)
const = matrix(c(0, 0.44), ncol = 1)
}
# 根據遞迴式計算新的 p 坐標值。
p = m %*% p + const
# 將新的 p 點坐標合併至 coord 中。
coord = rbind(coord, t(p))
}
# 作圖。
plot(x = coord[, 2], y = coord[, 1], plt = c(0, 10, -5, 5), cex = 0.1, asp = 1)
?trace
?trace
plot
library('MitISEM')
MitISEM
test <- matrix(c(1:6), 2, 3)
attributes(test) <- NULL
attr(test, 'dim') <- c(2, 3)
matrix
test
mode(test)
1.01^365
